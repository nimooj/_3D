/*!
*	\class GMyObject
*	\brief .... 표현하는 클래스
*
*	\author 윤승현(shyun@dongguk.edu)
*	\date 11 Feb., 2016
*/
class GMyObject: public GMesh
{
	DECLARE_GMESH_OBJECT(GMyObject)
public:
	// 생성자 및 소멸자
	GMyObject();
	GMyObject(std::string _Name, GTransf _MC, /* 데이터 멤버 */, std::string _ParentName);
	GMyObject(const GMyObject &rhs);
	virtual ~GMyObject();

	// 대입 연산자
	GMyObject &operator =(const GMyObject &rhs);

	// 메쉬 생성함수
	void CreateMeshVert();
	void CreateMeshTex();
	void CreateMeshFace();

public:
	/*! \brief 데이터 메버 */
};


#include "..\usr\include\gobject.h"

/*************************************/
/* Implementation of GMyObject Class */
/*************************************/
IMPLEMENT_GMESH_OBJECT(GMyObject)

/*!
*	\brief 객체가 포함된 메쉬의 포인터를 반환한다.
*
*	\return 객체가 포함된 메쉬의 포인터를 반환한다.
*/
GMesh *GMyObject::GetRefMesh()
{
	return this;
}

/*!
*	\brief 객체의 모델링 좌표계를 반환한다.
*
*	\return 월드 좌표계에서 객체의 모델링 좌표계를 반환한다
*/
GTransf GMyObject::GetTransf()
{
	return MC;
}

/*!
*	\brief 선택된 객체를 편집한다.
*
*	\param EC 편집 좌표계
*	\param t 편집될 객체의 이동 변위
*	\param q 편집될 객체의 회전 변위
*	\param s 편집될 객체의 스케일 변위
*	\param pParentMesh 편집 객체의 부모 메쉬
*/
void GMyObject::Edit(GTransf EC, GVector3 t, GQuater q, GVector3 s, GMesh *pParentMesh)
{
	GMesh::Edit(EC, t, q, s, pParentMesh);
}

/*!
*	\brief	메쉬의 모델링 좌표계를 월드 좌표계로 갱신한다.
*
*	\param RefType 모델링 좌표계의 갱신을 위한 참조 형태(0: 월드 좌표계, 1: 경계상자 좌표계)
*/
void GMyObject::UpdateMC(int RefType)
{
}

/*!
*	\brief	곡선의 정점의 위치를 갱신한다.
*/
void GMyObject::UpdateMesh()
{
	switch (ModifiedFlag)
	{
	case MODIFIED_VERT_POS:
		break;

	case MODIFIED_VERT_NUM:
		break;

		// 재질이 변경되었다면,
	case MODIFIED_MTL:
		UpdateBufFace();
		break;

	case MODIFIED_INTPT_POS:
		UpdateBndBox(false);
		break;

	case MODIFIED_CTLPT_POS:
		break;

	case MODIFIED_SAMPLE_NUM:
		CreateMesh();
		break;
	}

	ModifiedFlag = MODIFIED_NONE;
}

/*!
*	\brief 선택된 객체를 렌더링 한다.
*/
void GMyObject::RenderForEdit(float r, float g, float b)
{
	GMesh::RenderForEdit(r, g, b);
}

/*!
*	\brief	기본 생성자
*/
GMyObject::GMyObject()
: GMesh("noname", GTransf(), FACE_TRI, "")
{
}

/*!
*	\brief	생성자
*
*	\param _Name 객체의 이름
*	\param _ParentName 곡선의 부모 메쉬의 이름
*/
GMyObject::GMyObject(std::string _Name, GTransf _MC, std::string _ParentName = "")
: GMesh(_Name, _MC, FACE_TRI, _ParentName)
{
	// 데이터 멤버 초기화...
}

/*!
*	\brief	복사 생성자
*
*	\param cpy 복사될 객체
*/
GMyObject::GMyObject(const GMyObject &cpy)
: GMesh(cpy)
{
	// 데이터 멤버 복사...
}

/*!
*	\brief	소멸자
*/
GMyObject::~GMyObject()
{
}

/*!
*	\brief	대입 연산자
*
*	\param rhs 대입될 객체
*
*	\return 대입된 자신을 반환한다.
*/
GMyObject &GMyObject::operator =(const GMyObject &rhs)
{
	GMesh::operator =(rhs);

	// 데이터 멤버 복사

	return *this;
}

/*!
*	\brief 객체를 렌더링한다.
*
*	\param bSubMesh 서브 메쉬의 렌더링 여부(선택 모드에서는 false로 설정)
*/
void GMyObject::Render(bool bSubMesh)
{
	// 부모 클래스 함수를 호출한 후,
	GMesh::Render(bSubMesh);

	// 추가 속성 렌더링...
	glPushMatrix();
	{
		// 월드 좌표계에서 객체의 모델링 좌표계로 변환하고,
		glMultMatrixd(cast_mat(MC).M);		
	}
	glPopMatrix();
}

/*!
*	\brief	객체가 정의된 파라미터 도메인을 반환한다.
*
*	\param umin 도메인의 시작 값이 저장된다.
*	\param umax 도메인의 끝 값이 저장된다.
*/
void GMyObject::GetDomain(double *umin, ...)
{
	double *umax;
	va_list ap;
	va_start(ap, umin);
	umax = va_arg(ap, double *);
	va_end(ap);

	*umin = 0.0;
	*umax = 1.0;
}

/*!
*	\brief	객체의 제어점 리스트를 반환한다.
*
*	\param CtrlPtList 객체의 제어점 리스트가 저장됨
*
*	\return 객체의 제어점 리스트를 반환한다.
*/
void GMyObject::GetCtrlPtList(std::vector<GCtrlPt *> &CtrlPtList)
{
}

/*!
*	\brief 객체의 렌더링을 위한 메쉬(정점의 리스트)를 생성한다.
*/
void GMyObject::CreateMesh()
{
	// 경계 정점의 리스트를 초기화 하고,
	InitBndryEdgeList();

	// 정점의 좌표를 생성하고,
	CreateMeshVert();

	// 텍스처 좌표를 생성하고,
	CreateMeshTex();

	// 삼각형 정보를 생성하고, 
	CreateMeshFace();

	// 정점의 법선을 계산하고,
	UpdateNormal(false);

	// 곡면의 바운딩 박스를 계산한다.
	UpdateBndBox(false);

	// 정점 버퍼와 인덱스 버퍼를 갱신한다.
	UpdateBufVertex();
	UpdateBufNormal();
	UpdateBufFace();
}

/*!
*	\brief	객체의 렌더링을 위한 정점의 리스트를 생성한다.
*/
void GMyObject::CreateMeshVert()
{
	// 기존의 정점을 지우고, 
	Verts.clear();

	// 정점 리스트 생성///
}

/*!
*	\brief	객체의 렌더링을 위한 텍스처 리스트를 생성한다.
*/
void GMyObject::CreateMeshTex()
{
	// 기존의 텍셀 정보를 지우고,
	Texs.clear();
}

/*!
*	\brief	객체의 렌더링을 위한 삼각형 리스트를 생성한다.
*/
void GMyObject::CreateMeshFace()
{
	// 삼각형 정보를 지우고,
	Faces.clear();

	// 삼각형 리스트 생성...
}

/*!
*	\brief	객체를 구성하는 정점을 계산한다.
*
*	\param u 매개변수의 값
*
*	\return 계산된 점을 반환한다
*/
GVector4 GMyObject::Eval(double u, ...)
{
	return GVector4();
}
